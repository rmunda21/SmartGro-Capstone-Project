/*
   Простой пример, демонстрирующий основные функции измерения температуры, давления и влажности
*/
#include <Wire.h>
#include <WiFi.h>
#include "time.h"
#include "sntp.h"
#include <Adafruit_BMP280.h>
// #include <GyverBME280.h>
#include "GyverBME280.h"
#include <PubSubClient.h>  
#ifndef ARDUINOJSON_H
#include <ArduinoJson.h>
#endif
WiFiClient espClient;
PubSubClient client(espClient);

GyverBME280 bme; 
Adafruit_BMP280 bmp;
#define light 2
#define cooling_element 12
#define heating_element 13
#define sensor_pin 34
float temperature,pressure;
float target_temp = 2.2;
int sensor;
const int threshold = 500;


int Timestamp = 0;

const char* ssid       = "ANDRE3379";
const char* password   = "891z2N|6";

const char* mqtt_server = "broker.hivemq.com";
const char* mqtt_SubTopic = "G_Pro_1"; // Replace with your ID number ex. 620012345_Project
const char* IDNumber = "G001"; 

const char* device_name   = IDNumber;
const char* mqtt_PubTopic = IDNumber; 

const char* ntpServer1 = "pool.ntp.org";
const char* ntpServer2 = "time.nist.gov";
const long  gmtOffset_sec = 3600;
const int   daylightOffset_sec = 3600;

const char* time_zone = "CET-1CEST,M3.5.0,M10.5.0/3";  // TimeZone rule for Europe/Rome including daylight adjustment rules (optional)
void reconnect();
void setup_wifi();
void callback(char* topic, byte* message, unsigned int length);
void transmit();
void cooling();
void heating();
void Light();





void printLocalTime()
{
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("No time available (yet)");
    return;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
}

unsigned long getTime(){
// RETURNS TIMESTAMP FOR CURRENT TIME FROM NTP SERVER
    time_t now;
    struct tm timeinfo;

    // get time from ntp server first and save to system
    if (!getLocalTime(&timeinfo)) {
      log_d("%s","Failed to obtain time, NTP");
      return(0);
    }

    // Retrieve time[Timestamp] from system and save to &now variable
    time(&now); 
    return now;  
  }




int TimeStamp(void){
      // RETURNS TIMESTAMP FOR CURRENT TIME
      time_t now;
      
      // Retrieve time[Timestamp] from system and save to &now variable
      time(&now);
      Timestamp = (int)now;
      return now;
      }

// Callback function (get's called when time adjusts via NTP)
void timeavailable(struct timeval *t)
{
  Serial.println("Got time adjustment from NTP!");
  Serial.println("***SYNCHRONIZED***");
  printLocalTime();
}
void setup_wifi() {
  vTaskDelay(10 / portTICK_PERIOD_MS); // delay 10 ms

  Serial.printf("\nConnecting to %s", ssid); // We start by connecting to a WiFi network
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    vTaskDelay(500 / portTICK_PERIOD_MS); // delay 500 ms
    Serial.print(".");
  }

  Serial.printf("\nWiFi connected! IP address: %s ", WiFi.localIP().toString().c_str());
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.println("\nAttempting MQTT connection...");

    // Attempt to connect
    if (client.connect(IDNumber)) {
      Serial.println("MQTT connected");

      // Subscribe
      client.subscribe(mqtt_SubTopic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 2 seconds");

      vTaskDelay(2000 / portTICK_PERIOD_MS); // delay 2 second
    }
  }
}


void callback(char* topic, byte* message, unsigned int length) { 
  
  char received[1000] = {0};    
  
  for (int i = 0; i < length; i++) { 
    received[i] = (char)message[i];    
  } 

  // PRINT RECEIVED MESSAGE
  Serial.printf("Message received! \nTopic: %s \nPayload: %s\n",topic,received);

  // TASKS
  // 1. CONVERT 'received' TO JSON
  DynamicJsonDocument doc(50);
  deserializeJson(doc, received);


  const char* sensor = doc["sensor"];
  const char* data = doc["message"];
  Serial.println(sensor);
    String action = String(sensor);
   
    


  }
 


void setup() {
  pinMode(light,OUTPUT);
  pinMode(sensor_pin,INPUT);
  Wire.begin();        // join i2c bus (address optional for master)
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  Serial.begin(115200);  


  bme.begin(); 

    // set notification call-back function
  sntp_set_time_sync_notification_cb( timeavailable );

  /**
   * NTP server address could be aquired via DHCP,
   *
   * NOTE: This call should be made BEFORE esp32 aquires IP address via DHCP,
   * otherwise SNTP option 42 would be rejected by default.
   * NOTE: configTime() function call if made AFTER DHCP-client run
   * will OVERRIDE aquired NTP server address
   */
  sntp_servermode_dhcp(1);    // (optional)

  /**
   * This will set configured ntp servers and constant TimeZone/daylightOffset
   * should be OK if your time zone does not need to adjust daylightOffset twice a year,
   * in such a case time adjustment won't be handled automagicaly.
   */
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer1, ntpServer2);

  /**
   * A more convenient approach to handle TimeZones with daylightOffset 
   * would be to specify a environmnet variable with TimeZone definition including daylight adjustmnet rules.
   * A list of rules for your zone could be obtained from https://github.com/esp8266/Arduino/blob/master/cores/esp8266/TZ.h
   */
  //configTzTime(time_zone, ntpServer1, ntpServer2);

  // //connect to WiFi
  // Serial.printf("Connecting to %s ", ssid);
  // WiFi.begin(ssid, password);
  // while (WiFi.status() != WL_CONNECTED) {
  //     delay(500);
  //     Serial.print(".");
  // }
  // Serial.println(" CONNECTED");
  getTime();

  if (!bmp.begin(0x76)) {
    Serial.println(F("Could not find a valid BMP280 sensor, check wiring or try a different address!"));
    while (1) delay(10);
  }

  pinMode(cooling_element,OUTPUT);

}

void heating()
{
  if (temperature < target_temp)
  {
    digitalWrite(heating_element,HIGH);
    Serial.println("heating ON");
  }
  else if (temperature > target_temp)
  {
    digitalWrite(heating_element,LOW);
    Serial.println("Heating OFF");
  }
}

void cooling()
{
  if (temperature > target_temp)
  {
    digitalWrite(cooling_element,HIGH);
    Serial.println("Cooling ON");
  }
  else if (temperature < target_temp)
  {
    digitalWrite(cooling_element,LOW);
    Serial.println("Cooling OFF");
  }
}

void Light()
{
  sensor = analogRead(sensor_pin);
  Serial.print("LDR = ");
  Serial.println(sensor);
  delay(500);
  if (sensor < threshold)
  {
    digitalWrite(light,HIGH);
  }
  else
  {
    digitalWrite(light,LOW);
  }
}


void transmit()
{
static int capacity  = JSON_OBJECT_SIZE(50); 
  DynamicJsonDocument json(capacity);
  
  char message[300]       = {0};
  json["TYPE"]            = "SENSOR";
  json["ID"]              = IDNumber;
  json["TEMPERATURE"]     = temperature;
  // json["HEATINDEX"]       = H_Index;
  // json["HUMID"]           = Hum; 
  json["PRESSURE"]        = pressure;
  // json["ALTITUDE"]        = Altitude;
  // json["SOINMOISTURE"]    = conv;
  json["TIMESTAMP"] = Timestamp;

  serializeJson(json,message);   
  json.clear(); 

  Serial.println(message);
  // client.publish(mqtt_PubTopic, message); 
  // PUBLISH MESSAGE
  if(Timestamp >= 167701500)
  {
    client.publish(mqtt_PubTopic, message); 
  }
    

  
  vTaskDelay(1000 / portTICK_PERIOD_MS); // delay 1 second 
  
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // delay(5000);
  printLocalTime();     // it will take some time to sync time :)
  Serial.println(TimeStamp());
  delay(1000);
  Serial.print("Temperature BME: ");
  Serial.print(bme.readTemperature());        // Выводим темперутуру в [*C]
  Serial.println(" °C");
  Serial.print("Temperature BMP: ");
  temperature = bmp.readTemperature();
  Serial.println(temperature);
  Serial.println(" °C");
  pressure = bmp.readPressure();

  Serial.print("BME  Altitide: ");
  Serial.print(pressureToAltitude(bme.readPressure())); // Выводим высоту в [м над ур. моря]
  Serial.println(" m");

   
  
  cooling();
  heating();
  Light();
  transmit();
  
}
