/*
   Простой пример, демонстрирующий основные функции измерения температуры, давления и влажности
*/
#include <WiFi.h>
#include "time.h"
#include "sntp.h"
#include <GyverBME280.h>                      // Подключение библиотеки
GyverBME280 bme; 
#define cooling_element 13
#define heating_element 12
float temperature;
float target_temp = 25.2;

int Timestamp = 0;

const char* ssid       = "ANDRE3379";
const char* password   = "891z2N|6";

const char* ntpServer1 = "pool.ntp.org";
const char* ntpServer2 = "time.nist.gov";
const long  gmtOffset_sec = 3600;
const int   daylightOffset_sec = 3600;

const char* time_zone = "CET-1CEST,M3.5.0,M10.5.0/3";  // TimeZone rule for Europe/Rome including daylight adjustment rules (optional)


void cooling();
void heating();





void printLocalTime()
{
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("No time available (yet)");
    return;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
}

unsigned long getTime(){
// RETURNS TIMESTAMP FOR CURRENT TIME FROM NTP SERVER
    time_t now;
    struct tm timeinfo;

    // get time from ntp server first and save to system
    if (!getLocalTime(&timeinfo)) {
      log_d("%s","Failed to obtain time, NTP");
      return(0);
    }

    // Retrieve time[Timestamp] from system and save to &now variable
    time(&now); 
    return now;  
    }


unsigned long TimeStamp(void){
      // RETURNS TIMESTAMP FOR CURRENT TIME
      time_t now;
      
      // Retrieve time[Timestamp] from system and save to &now variable
      time(&now);
      Timestamp = (int)now;
      return now;
      }

// Callback function (get's called when time adjusts via NTP)
void timeavailable(struct timeval *t)
{
  Serial.println("Got time adjustment from NTP!");
  Serial.println("***SYNCHRONIZED***");
  printLocalTime();
}

void setup() {
  Serial.begin(115200);   
    // set notification call-back function
  sntp_set_time_sync_notification_cb( timeavailable );

  /**
   * NTP server address could be aquired via DHCP,
   *
   * NOTE: This call should be made BEFORE esp32 aquires IP address via DHCP,
   * otherwise SNTP option 42 would be rejected by default.
   * NOTE: configTime() function call if made AFTER DHCP-client run
   * will OVERRIDE aquired NTP server address
   */
  sntp_servermode_dhcp(1);    // (optional)

  /**
   * This will set configured ntp servers and constant TimeZone/daylightOffset
   * should be OK if your time zone does not need to adjust daylightOffset twice a year,
   * in such a case time adjustment won't be handled automagicaly.
   */
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer1, ntpServer2);

  /**
   * A more convenient approach to handle TimeZones with daylightOffset 
   * would be to specify a environmnet variable with TimeZone definition including daylight adjustmnet rules.
   * A list of rules for your zone could be obtained from https://github.com/esp8266/Arduino/blob/master/cores/esp8266/TZ.h
   */
  //configTzTime(time_zone, ntpServer1, ntpServer2);

  //connect to WiFi
  Serial.printf("Connecting to %s ", ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
  }
  Serial.println(" CONNECTED");
  getTime();


  pinMode(cooling_element,OUTPUT);

  bme.begin();                                
  

}

void heating()
{
  if (temperature < target_temp)
  {
    digitalWrite(heating_element,HIGH);
    Serial.println("heating ON");
  }
  else if (temperature > target_temp)
  {
    digitalWrite(heating_element,LOW);
    Serial.println("Heating OFF");
  }
}

void cooling()
{
  if (temperature > target_temp)
  {
    digitalWrite(cooling_element,HIGH);
    Serial.println("Cooling ON");
  }
  else if (temperature < target_temp)
  {
    digitalWrite(cooling_element,LOW);
    Serial.println("Cooling OFF");
  }
}
void loop() {
  // delay(5000);
  printLocalTime();     // it will take some time to sync time :)
  Serial.println(TimeStamp());
  Serial.print("Temperature: ");
  Serial.print(bme.readTemperature());        // Выводим темперутуру в [*C]
  Serial.println(" *C");
  temperature = bme.readTemperature();
  
  cooling();
  heating();
  
}
